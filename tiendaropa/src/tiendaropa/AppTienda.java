/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tiendaropa;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author APOYO
 */
public class AppTienda extends javax.swing.JFrame {

    //se inicia la aplicacion y se comprueba que existen las tablas
    public AppTienda() {
        initComponents();
        existen();
    }
    
    //Conexion a la base de datos ACCESS tienda de ropa
    private Connection Conexion(){
        //se crea una con objeto conexion
        Connection conex=null;
        
        try {
            //se indica el directorio de la base de datos
            String connectionUrl = "C:\\tareas\\tarea03\\tiendaropa.mdb";
            //Se obtine la conexión
            Connection con=DriverManager.getConnection("jdbc:ucanaccess://"+connectionUrl);
            conex = con;
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //se comparte la conexion con el resto de la clase.
        return conex;
    }
    
    //Se comprueba que existen las tablas
    //si no existen muestra un mensaje informado de que hay que crearlas
    private void existen(){
        try {                                         
            String em = "empleados";
            String pro = "productos";
            int aux = 0;
            int tem = 0;
            int tpro = 0;
            
            // crear tabla empleados
            Connection con = this.Conexion();
            
            //obtener metadatos de la base de datos
            DatabaseMetaData base = this.Conexion().getMetaData();
            
            ResultSet rs = base.getTables(null, null, "%", null);
                        
            while(rs.next()){
                String tabla= rs.getString(3);

                if(em.equals(tabla)){
                    aux++;
                    tem++;
                }else if(pro.equals(tabla)){
                    aux++;
                    tpro++;
                }
            }
            
            if(aux ==0){
                JOptionPane.showMessageDialog(null, "Debe crear las tablas de empleados y de ventas");
            }else if(tem==1 && tpro==0){
                JOptionPane.showMessageDialog(null, "Debe crear la tabla de ventas");
            }else if(tpro==1 && tem==0){
                JOptionPane.showMessageDialog(null, "Debe crear la tabla de empleados");
            }
            
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Puma (1).png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jLabel2.setText("TAREA 3 - ACCESO A DATOS");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Seleccione una opción"));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("CREAR TABLA EMPLEADOS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setText("INSERTAR EMPLEADOS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setText("INSERTAR VENTA PRODUCTO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setText("MOSTRAR EMPLEADOS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setText("MOSTRAR VENTAS");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setText("CREAR TABLA VENTAS");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setText("ACTUALIZAR EMPLEADO(1)");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setText("ACTUALIZAR VENTA");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 255, 255));
        jButton9.setText("LISTAR VENTA POR EMPLEADO");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 255, 255));
        jButton10.setText("ACTUALIZAR EMPLEADO(2)");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jLabel1))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/application-exit.png"))); // NOI18N
        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //cierra la aplicacion desde salir de archivo
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //salir de la app
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Crea la tabla de empleados si no existe
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {                                         
            String em = "empleados";
            int aux = 0;
            // crear tabla empleados
            Connection con = this.Conexion();
            
            //obtener metadatos de la base de datos
            DatabaseMetaData base = this.Conexion().getMetaData();
            
            ResultSet rs = base.getTables(null, null, "%", null);
         
            while(rs.next()){
                String tabla= rs.getString(3);
                if(em.equals(tabla)){
                    aux=1;
                    break;
                }
            }
            if(aux ==1){
                JOptionPane.showMessageDialog(null, "No se puede crear la tabla empleados, porque ya existe");
            }else{
                Statement stmt = con.createStatement();
                stmt.execute("CREATE TABLE empleados(Codigo_empleado COUNTER PRIMARY KEY, nombre text(255), telefono long)");
                JOptionPane.showMessageDialog(null, "Se ha creado la tabla empleados");
            }
            
        } catch (SQLException ex) {
            System.out.println("SQL Exception: "+ ex.toString());
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    //crea la tabla de productos si no existe
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {                                         
            String em = "productos";
            int aux = 0;
            // crear tabla empleados
            Connection con = this.Conexion();
            
            //obtener metadatos de la base de datos
            DatabaseMetaData base = this.Conexion().getMetaData();
            
            ResultSet rs = base.getTables(null, null, "%", null);
                        
            while(rs.next()){
                String tabla= rs.getString(3);
                if(em.equals(tabla)){
                    aux=1;
                    break;
                }
            }
            if(aux ==1){
                JOptionPane.showMessageDialog(null, "No se puede crear la tabla producto, porque ya existe");
            }else{
                Statement stmt = con.createStatement();
                stmt.execute("CREATE TABLE productos(Codigo_producto COUNTER PRIMARY KEY, nombre text(255), codigo_empleado long, numero_venta long)");
                JOptionPane.showMessageDialog(null, "Se ha creado la tabla productos");
            }
            
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //abre el formulario para crear empleados si existe la tabla empleados
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {                                         
            String emp = "empleados";
            int aux = 0;
            // crear tabla empleados
            Connection con = this.Conexion();
            
            //obtener metadatos de la base de datos
            DatabaseMetaData base = this.Conexion().getMetaData();
            
            ResultSet rs = base.getTables(null, null, "%", null);
                        
            while(rs.next()){
                String tabla= rs.getString(3);
                if(emp.equals(tabla)){
                    aux=1;
                    break;
                }
            }
            
            if(aux ==0){
                JOptionPane.showMessageDialog(null, "Debe crear la tabla empleados antes de registrar el empleado");
            }else{
                Empleados em = new Empleados();
                em.setVisible(true);
            }
            
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    //abre el formulario para insertar ventas si existe la tabla productos
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from empleados");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "Antes de registrar una venta, debe registrar por lo menos un empleado");
            }else{
                VentaReg vr = new VentaReg();
                vr.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Muestra los empleados en una tabla si hay empleados registrados
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from empleados");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede visualizar la lista de empleados, ya que no existe ningun empleado");
            }else{
                MostrarEmpleados me = new MostrarEmpleados();
        me.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    //Muestra las ventas en una tabla si hay ventas registradas
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from productos");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede visualizar la lista de productos, ya que no existe ningun producto");
            }else{
                MostrarVentas mv = new MostrarVentas();
        mv.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    //abre el formulario para actualizar los datos de empleado si existen empleados registradoos
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from empleados");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede actualizar ningun empleado, ya que no existe ningun empleado");
            }else{
                ActEmpleados ae = new ActEmpleados();
                ae.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }//GEN-LAST:event_jButton7ActionPerformed

    //abre el formulario para acutalizar los datos de venta si existen ventas registradas
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from productos");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede actualizar ningun producto, ya que no existe ningun producto");
            }else{
                ActVentas av = new ActVentas();
                av.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton8ActionPerformed

    //abre la lista de ventas por productos y los nombres de empleados
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from empleados");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede visualizar la tabla de ventas, ya que no existen empleados, ni productos");
            }else{
                LisVenNombre lvn = new LisVenNombre();
                lvn.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    //abre el formulario para acutalizar los empleados por sentencias preparadas si existen empleados registrados.
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            int aux=0;
            Connection con = this.Conexion();
            
            Statement stmt = con.createStatement();
            
            //se obtiene el resultado de la consulta
            ResultSet rs = stmt.executeQuery("SELECT * from empleados");
            
            while(rs.next()){
                aux++;
            }
            
            //control para registrar una venta, si no hay empleados, no se abre la opcion de registros
            if(aux==0){
                JOptionPane.showMessageDialog(null, "No se puede actualizar ningun empleado, ya que no existe ningun empleado");
            }else{
                ActEmpleados2 ae = new ActEmpleados2();
                ae.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AppTienda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
